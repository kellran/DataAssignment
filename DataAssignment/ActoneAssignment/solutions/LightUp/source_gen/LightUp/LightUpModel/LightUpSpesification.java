package LightUp.LightUpModel;

/*Generated by MPS */

import ActOne.runtime.predefined.BOOLEAN;
import ActOne.runtime.predefined.INTEGER;
import ActOne.runtime.predefined.STRING;
import ActOne.runtime.predefined.ANY;
import ActOne.runtime.model.ITerm;
import ActOne.runtime.model.Operator;
import ActOne.runtime.predefined.INTEGER.Int;
import ActOne.runtime.predefined.BOOLEAN.Bool;
import ActOne.runtime.model.Reductions;

public abstract class LightUpSpesification {

  public static Object dummy_BOOLEAN() {
    // init connection to imported sort BOOLEAN.Bool
    return null;
  }
  public static Object dummy_INTEGER() {
    // init connection to imported sort INTEGER.Int
    return null;
  }
  public static BOOLEAN.Bool dummy_bool() {
    // init connection to Bool
    return null;
  }
  public static INTEGER.Int dummy_int() {
    // init connection to Int
    return null;
  }
  public static STRING.String dummy_string() {
    // init connection to String
    return null;
  }
  public static ANY.Any dummy_any() {
    // init connection to Any
    return null;
  }

  public static class LightUp extends ITerm {

    public LightUp(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public LightUp(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class Line extends ITerm {

    public Line(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public Line(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class SightLine extends ITerm {

    public SightLine(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public SightLine(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class Box extends ITerm {

    public Box(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public Box(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class LightBulb extends ITerm {

    public LightBulb(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public LightBulb(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class AdjecentBlock extends ITerm {

    public AdjecentBlock(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public AdjecentBlock(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }


  public static final Line l1 = new Line(ITerm.Kind.VARIABLE, "l1");
  public static final Line l2 = new Line(ITerm.Kind.VARIABLE, "l2");
  public static final Line l3 = new Line(ITerm.Kind.VARIABLE, "l3");
  public static final Line l4 = new Line(ITerm.Kind.VARIABLE, "l4");
  public static final Line l5 = new Line(ITerm.Kind.VARIABLE, "l5");
  public static final Box T1 = new Box(ITerm.Kind.VARIABLE, "T1");
  public static final Box T2 = new Box(ITerm.Kind.VARIABLE, "T2");
  public static final Box T3 = new Box(ITerm.Kind.VARIABLE, "T3");
  public static final Box T4 = new Box(ITerm.Kind.VARIABLE, "T4");
  public static final Box T5 = new Box(ITerm.Kind.VARIABLE, "T5");
  public static final Box V = new Box(ITerm.Kind.VARIABLE, "V");
  public static final Box H = new Box(ITerm.Kind.VARIABLE, "H");
  public static final Box AnyBox = new Box(ITerm.Kind.VARIABLE, "AnyBox");
  public static final Line AnyLine = new Line(ITerm.Kind.VARIABLE, "AnyLine");
  public static final LightUp AnyPuzzle = new LightUp(ITerm.Kind.VARIABLE, "AnyPuzzle");
  public static final Box Over = new Box(ITerm.Kind.VARIABLE, "Over");
  public static final Box Right = new Box(ITerm.Kind.VARIABLE, "Right");
  public static final Box Under = new Box(ITerm.Kind.VARIABLE, "Under");
  public static final Box Left = new Box(ITerm.Kind.VARIABLE, "Left");
  public static final Box Pos = new Box(ITerm.Kind.VARIABLE, "Pos");
  public static final Box OutOfBound = new Box(ITerm.Kind.VARIABLE, "OutOfBound");
  public static final Box B1_1 = new Box(ITerm.Kind.VARIABLE, "B1_1");
  public static final Box B1_2 = new Box(ITerm.Kind.VARIABLE, "B1_2");
  public static final Box B1_3 = new Box(ITerm.Kind.VARIABLE, "B1_3");
  public static final Box B1_4 = new Box(ITerm.Kind.VARIABLE, "B1_4");
  public static final Box B1_5 = new Box(ITerm.Kind.VARIABLE, "B1_5");
  public static final Box B2_1 = new Box(ITerm.Kind.VARIABLE, "B2_1");
  public static final Box B2_2 = new Box(ITerm.Kind.VARIABLE, "B2_2");
  public static final Box B2_3 = new Box(ITerm.Kind.VARIABLE, "B2_3");
  public static final Box B2_4 = new Box(ITerm.Kind.VARIABLE, "B2_4");
  public static final Box B2_5 = new Box(ITerm.Kind.VARIABLE, "B2_5");
  public static final Box B3_1 = new Box(ITerm.Kind.VARIABLE, "B3_1");
  public static final Box B3_2 = new Box(ITerm.Kind.VARIABLE, "B3_2");
  public static final Box B3_3 = new Box(ITerm.Kind.VARIABLE, "B3_3");
  public static final Box B3_4 = new Box(ITerm.Kind.VARIABLE, "B3_4");
  public static final Box B3_5 = new Box(ITerm.Kind.VARIABLE, "B3_5");
  public static final Box B4_1 = new Box(ITerm.Kind.VARIABLE, "B4_1");
  public static final Box B4_2 = new Box(ITerm.Kind.VARIABLE, "B4_2");
  public static final Box B4_3 = new Box(ITerm.Kind.VARIABLE, "B4_3");
  public static final Box B4_4 = new Box(ITerm.Kind.VARIABLE, "B4_4");
  public static final Box B4_5 = new Box(ITerm.Kind.VARIABLE, "B4_5");
  public static final Box B5_1 = new Box(ITerm.Kind.VARIABLE, "B5_1");
  public static final Box B5_2 = new Box(ITerm.Kind.VARIABLE, "B5_2");
  public static final Box B5_3 = new Box(ITerm.Kind.VARIABLE, "B5_3");
  public static final Box B5_4 = new Box(ITerm.Kind.VARIABLE, "B5_4");
  public static final Box B5_5 = new Box(ITerm.Kind.VARIABLE, "B5_5");

  private static final Operator oper_mkLightUp = new Operator(true, "mkLightUp");
  private static final Operator oper_MkTestPuzzle = new Operator(true, "MkTestPuzzle");
  private static final Operator oper_mkLine = new Operator(true, "mkLine");
  private static final Operator oper_mkSightLine = new Operator(true, "mkSightLine");
  private static final Operator oper_mkAdjecentBlock = new Operator(true, "mkAdjecentBlock");
  private static final Operator oper_OutOfBounds = new Operator(true, "OutOfBounds");
  private static final Operator oper__0 = new Operator(true, "_0");
  private static final Operator oper__1 = new Operator(true, "_1");
  private static final Operator oper__2 = new Operator(true, "_2");
  private static final Operator oper__3 = new Operator(true, "_3");
  private static final Operator oper__4 = new Operator(true, "_4");
  private static final Operator oper__X = new Operator(true, "_X");
  private static final Operator oper__G = new Operator(true, "_G");
  private static final Operator oper__W = new Operator(true, "_W");
  private static final Operator oper__B = new Operator(true, "_B");
  private static final Operator oper__L = new Operator(true, "_L");
  private static final Operator oper_CountWhite = new Operator(false, "CountWhite");
  private static final Operator oper_CountBulb = new Operator(false, "CountBulb");
  private static final Operator oper_CountNumberedBox = new Operator(false, "CountNumberedBox");
  private static final Operator oper_ValidateAroundNumber = new Operator(false, "ValidateAroundNumber");
  private static final Operator oper_CountBulbsInPuzzle1 = new Operator(false, "CountBulbsInPuzzle1");
  private static final Operator oper_CountBulbsInPuzzle2 = new Operator(false, "CountBulbsInPuzzle2");
  private static final Operator oper_CountBulbsInPuzzle3 = new Operator(false, "CountBulbsInPuzzle3");
  private static final Operator oper_CountBulbsInPuzzle4 = new Operator(false, "CountBulbsInPuzzle4");
  private static final Operator oper_CountBulbsInPuzzle5 = new Operator(false, "CountBulbsInPuzzle5");
  private static final Operator oper_CountBulbsInPuzzleAll = new Operator(false, "CountBulbsInPuzzleAll");
  private static final Operator oper_Switch = new Operator(false, "Switch");
  private static final Operator oper_SwitchLineRight = new Operator(false, "SwitchLineRight");
  private static final Operator oper_SwitchLineLeft = new Operator(false, "SwitchLineLeft");
  private static final Operator oper_PutLights = new Operator(false, "PutLights");
  private static final Operator oper_NoDoubleLampCheck = new Operator(false, "NoDoubleLampCheck");
  private static final Operator oper_CheckAllDoubleLamps = new Operator(false, "CheckAllDoubleLamps");
  private static final Operator oper_CheckForGreys = new Operator(false, "CheckForGreys");
  private static final Operator oper_CheckForWhites = new Operator(false, "CheckForWhites");
  private static final Operator oper_CheckLineForGrey = new Operator(false, "CheckLineForGrey");
  private static final Operator oper_CheckLineForWhite = new Operator(false, "CheckLineForWhite");
  private static final Operator oper_CheckPuzzleForGrey = new Operator(false, "CheckPuzzleForGrey");
  private static final Operator oper_CheckPuzzleForWhite = new Operator(false, "CheckPuzzleForWhite");
  private static final Operator oper_CountGreysAndWhites = new Operator(false, "CountGreysAndWhites");
  private static final Operator oper_GreysAndWhitesMoreThanZero = new Operator(false, "GreysAndWhitesMoreThanZero");
  private static final Operator oper_CorrectPuzzle = new Operator(false, "CorrectPuzzle");
  private static final Operator oper_Transpose = new Operator(false, "Transpose");

  public static LightUp mkLightUp(Line Line_0, Line Line_1, Line Line_2, Line Line_3, Line Line_4) {
    return new LightUp(oper_mkLightUp, Line_0, Line_1, Line_2, Line_3, Line_4);
  }
  public static LightUp MkTestPuzzle(AdjecentBlock AdjecentBlock_0, AdjecentBlock AdjecentBlock_1, AdjecentBlock AdjecentBlock_2, AdjecentBlock AdjecentBlock_3, AdjecentBlock AdjecentBlock_4) {
    return new LightUp(oper_MkTestPuzzle, AdjecentBlock_0, AdjecentBlock_1, AdjecentBlock_2, AdjecentBlock_3, AdjecentBlock_4);
  }
  public static Line mkLine(Box Box_0, Box Box_1, Box Box_2, Box Box_3, Box Box_4) {
    return new Line(oper_mkLine, Box_0, Box_1, Box_2, Box_3, Box_4);
  }
  public static SightLine mkSightLine(Line Line_5) {
    return new SightLine(oper_mkSightLine, Line_5);
  }
  public static AdjecentBlock mkAdjecentBlock(Box Box_5, Box Box_6, Box Box_7, Box Box_8, Box Box_9) {
    return new AdjecentBlock(oper_mkAdjecentBlock, Box_5, Box_6, Box_7, Box_8, Box_9);
  }
  public static Box OutOfBounds() {
    return new Box(oper_OutOfBounds);
  }
  public static Box _0() {
    return new Box(oper__0);
  }
  public static Box _1() {
    return new Box(oper__1);
  }
  public static Box _2() {
    return new Box(oper__2);
  }
  public static Box _3() {
    return new Box(oper__3);
  }
  public static Box _4() {
    return new Box(oper__4);
  }
  public static Box _X() {
    return new Box(oper__X);
  }
  public static Box _G() {
    return new Box(oper__G);
  }
  public static Box _W() {
    return new Box(oper__W);
  }
  public static Box _B() {
    return new Box(oper__B);
  }
  public static Box _L() {
    return new Box(oper__L);
  }
  public static Int CountWhite(Box Box_10) {
    return new Int(oper_CountWhite, Box_10);
  }
  public static Int CountBulb(Box Box_11) {
    return new Int(oper_CountBulb, Box_11);
  }
  public static Int CountNumberedBox(Box Box_12) {
    return new Int(oper_CountNumberedBox, Box_12);
  }
  public static Bool ValidateAroundNumber(AdjecentBlock AdjecentBlock_5) {
    return new Bool(oper_ValidateAroundNumber, AdjecentBlock_5);
  }
  public static Bool CountBulbsInPuzzle1(LightUp LightUp_0) {
    return new Bool(oper_CountBulbsInPuzzle1, LightUp_0);
  }
  public static Bool CountBulbsInPuzzle2(LightUp LightUp_1) {
    return new Bool(oper_CountBulbsInPuzzle2, LightUp_1);
  }
  public static Bool CountBulbsInPuzzle3(LightUp LightUp_2) {
    return new Bool(oper_CountBulbsInPuzzle3, LightUp_2);
  }
  public static Bool CountBulbsInPuzzle4(LightUp LightUp_3) {
    return new Bool(oper_CountBulbsInPuzzle4, LightUp_3);
  }
  public static Bool CountBulbsInPuzzle5(LightUp LightUp_4) {
    return new Bool(oper_CountBulbsInPuzzle5, LightUp_4);
  }
  public static Bool CountBulbsInPuzzleAll(LightUp LightUp_5) {
    return new Bool(oper_CountBulbsInPuzzleAll, LightUp_5);
  }
  public static Box Switch(Box Box_13) {
    return new Box(oper_Switch, Box_13);
  }
  public static Line SwitchLineRight(Line Line_6) {
    return new Line(oper_SwitchLineRight, Line_6);
  }
  public static Line SwitchLineLeft(Line Line_7) {
    return new Line(oper_SwitchLineLeft, Line_7);
  }
  public static LightUp PutLights(LightUp LightUp_6) {
    return new LightUp(oper_PutLights, LightUp_6);
  }
  public static Bool NoDoubleLampCheck(Line Line_8) {
    return new Bool(oper_NoDoubleLampCheck, Line_8);
  }
  public static Bool CheckAllDoubleLamps(LightUp LightUp_7) {
    return new Bool(oper_CheckAllDoubleLamps, LightUp_7);
  }
  public static Int CheckForGreys(Box Box_14) {
    return new Int(oper_CheckForGreys, Box_14);
  }
  public static Int CheckForWhites(Box Box_15) {
    return new Int(oper_CheckForWhites, Box_15);
  }
  public static Int CheckLineForGrey(Line Line_9) {
    return new Int(oper_CheckLineForGrey, Line_9);
  }
  public static Int CheckLineForWhite(Line Line_10) {
    return new Int(oper_CheckLineForWhite, Line_10);
  }
  public static Int CheckPuzzleForGrey(LightUp LightUp_8) {
    return new Int(oper_CheckPuzzleForGrey, LightUp_8);
  }
  public static Int CheckPuzzleForWhite(LightUp LightUp_9) {
    return new Int(oper_CheckPuzzleForWhite, LightUp_9);
  }
  public static Int CountGreysAndWhites(LightUp LightUp_10) {
    return new Int(oper_CountGreysAndWhites, LightUp_10);
  }
  public static Bool GreysAndWhitesMoreThanZero(LightUp LightUp_11) {
    return new Bool(oper_GreysAndWhitesMoreThanZero, LightUp_11);
  }
  public static Bool CorrectPuzzle(LightUp LightUp_12) {
    return new Bool(oper_CorrectPuzzle, LightUp_12);
  }
  public static LightUp Transpose(LightUp LightUp_13) {
    return new LightUp(oper_Transpose, LightUp_13);
  }

  /*package*/ static void initAxioms() {
    System.out.println("Using axioms of " + "LightUpSpesification");
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._B()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._W()), INTEGER.natValueTerm(1));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._X()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._G()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._L()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._0()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._1()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._2()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._3()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification._4()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountWhite(LightUpSpesification.OutOfBounds()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._B()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._W()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._X()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._G()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._L()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._0()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._1()), INTEGER.natValueTerm(1));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._2()), INTEGER.natValueTerm(2));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._3()), INTEGER.natValueTerm(3));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification._4()), INTEGER.natValueTerm(4));
    ITerm.axiom(LightUpSpesification.CountNumberedBox(LightUpSpesification.OutOfBounds()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._B()), INTEGER.natValueTerm(1));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._W()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._X()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._G()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._L()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._0()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._1()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._2()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._3()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification._4()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.CountBulb(LightUpSpesification.OutOfBounds()), INTEGER.natValueTerm(0));
    ITerm.axiom(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.Over, LightUpSpesification.Right, LightUpSpesification.Under, LightUpSpesification.Left, LightUpSpesification.Pos)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.Pos, LightUpSpesification._0()), BOOLEAN.Equal(LightUpSpesification.Pos, LightUpSpesification._1())), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.Pos, LightUpSpesification._2()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.Pos, LightUpSpesification._3()), BOOLEAN.Equal(LightUpSpesification.Pos, LightUpSpesification._4()))))), BOOLEAN.True(), BOOLEAN.If_Then_Else(BOOLEAN.Or(INTEGER.GR(INTEGER.ADD(INTEGER.ADD(LightUpSpesification.CountBulb(LightUpSpesification.Over), LightUpSpesification.CountBulb(LightUpSpesification.Under)), INTEGER.ADD(LightUpSpesification.CountBulb(LightUpSpesification.Right), LightUpSpesification.CountBulb(LightUpSpesification.Left))), LightUpSpesification.CountNumberedBox(LightUpSpesification.Pos)), BOOLEAN.Not(INTEGER.EQ_GR(INTEGER.ADD(INTEGER.ADD(INTEGER.ADD(LightUpSpesification.CountBulb(LightUpSpesification.Over), LightUpSpesification.CountWhite(LightUpSpesification.Over)), INTEGER.ADD(LightUpSpesification.CountBulb(LightUpSpesification.Under), LightUpSpesification.CountWhite(LightUpSpesification.Under))), INTEGER.ADD(INTEGER.ADD(LightUpSpesification.CountBulb(LightUpSpesification.Right), LightUpSpesification.CountWhite(LightUpSpesification.Right)), INTEGER.ADD(LightUpSpesification.CountBulb(LightUpSpesification.Left), LightUpSpesification.CountWhite(LightUpSpesification.Left)))), LightUpSpesification.CountNumberedBox(LightUpSpesification.Pos)))), BOOLEAN.False(), BOOLEAN.True())));
    ITerm.axiom(LightUpSpesification.CountBulbsInPuzzle1(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.OutOfBounds(), LightUpSpesification.B1_2, LightUpSpesification.B2_1, LightUpSpesification.OutOfBounds(), LightUpSpesification.B1_1)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.OutOfBounds(), LightUpSpesification.B1_3, LightUpSpesification.B2_2, LightUpSpesification.B1_1, LightUpSpesification.B1_2)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.OutOfBounds(), LightUpSpesification.B1_4, LightUpSpesification.B2_3, LightUpSpesification.B1_2, LightUpSpesification.B1_3)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.OutOfBounds(), LightUpSpesification.B1_5, LightUpSpesification.B2_4, LightUpSpesification.B1_3, LightUpSpesification.B1_4)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.OutOfBounds(), LightUpSpesification.OutOfBounds(), LightUpSpesification.B2_5, LightUpSpesification.B1_4, LightUpSpesification.B1_5)), BOOLEAN.True(), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()));
    ITerm.axiom(LightUpSpesification.CountBulbsInPuzzle2(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B1_1, LightUpSpesification.B2_2, LightUpSpesification.B3_1, LightUpSpesification.OutOfBounds(), LightUpSpesification.B2_1)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B1_2, LightUpSpesification.B2_3, LightUpSpesification.B3_2, LightUpSpesification.B2_1, LightUpSpesification.B2_2)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B1_3, LightUpSpesification.B2_4, LightUpSpesification.B3_3, LightUpSpesification.B2_2, LightUpSpesification.B2_3)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B1_4, LightUpSpesification.B2_5, LightUpSpesification.B3_4, LightUpSpesification.B2_3, LightUpSpesification.B2_4)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B1_5, LightUpSpesification.OutOfBounds(), LightUpSpesification.B3_5, LightUpSpesification.B2_4, LightUpSpesification.B2_5)), BOOLEAN.True(), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()));
    ITerm.axiom(LightUpSpesification.CountBulbsInPuzzle3(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B2_1, LightUpSpesification.B3_2, LightUpSpesification.B4_1, LightUpSpesification.OutOfBounds(), LightUpSpesification.B3_1)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B2_2, LightUpSpesification.B3_3, LightUpSpesification.B4_2, LightUpSpesification.B3_1, LightUpSpesification.B3_2)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B2_3, LightUpSpesification.B3_4, LightUpSpesification.B4_3, LightUpSpesification.B3_2, LightUpSpesification.B3_3)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B2_4, LightUpSpesification.B3_5, LightUpSpesification.B4_4, LightUpSpesification.B3_3, LightUpSpesification.B3_4)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B2_5, LightUpSpesification.OutOfBounds(), LightUpSpesification.B4_5, LightUpSpesification.B3_4, LightUpSpesification.B3_5)), BOOLEAN.True(), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()));
    ITerm.axiom(LightUpSpesification.CountBulbsInPuzzle4(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B3_1, LightUpSpesification.B4_2, LightUpSpesification.B5_1, LightUpSpesification.OutOfBounds(), LightUpSpesification.B4_1)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B3_2, LightUpSpesification.B4_3, LightUpSpesification.B5_2, LightUpSpesification.B4_1, LightUpSpesification.B4_2)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B3_3, LightUpSpesification.B4_4, LightUpSpesification.B5_3, LightUpSpesification.B4_2, LightUpSpesification.B4_3)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B3_4, LightUpSpesification.B4_5, LightUpSpesification.B5_4, LightUpSpesification.B4_3, LightUpSpesification.B4_4)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B3_5, LightUpSpesification.OutOfBounds(), LightUpSpesification.B5_5, LightUpSpesification.B4_4, LightUpSpesification.B4_5)), BOOLEAN.True(), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()));
    ITerm.axiom(LightUpSpesification.CountBulbsInPuzzle5(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B4_1, LightUpSpesification.B5_2, LightUpSpesification.OutOfBounds(), LightUpSpesification.OutOfBounds(), LightUpSpesification.B5_1)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B4_2, LightUpSpesification.B5_3, LightUpSpesification.OutOfBounds(), LightUpSpesification.B5_1, LightUpSpesification.B5_2)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B4_3, LightUpSpesification.B5_4, LightUpSpesification.OutOfBounds(), LightUpSpesification.B5_2, LightUpSpesification.B5_3)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B4_4, LightUpSpesification.B5_5, LightUpSpesification.OutOfBounds(), LightUpSpesification.B5_3, LightUpSpesification.B5_4)), BOOLEAN.If_Then_Else(LightUpSpesification.ValidateAroundNumber(LightUpSpesification.mkAdjecentBlock(LightUpSpesification.B4_5, LightUpSpesification.OutOfBounds(), LightUpSpesification.OutOfBounds(), LightUpSpesification.B5_4, LightUpSpesification.B5_5)), BOOLEAN.True(), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()));
    ITerm.axiom(LightUpSpesification.CountBulbsInPuzzleAll(LightUpSpesification.AnyPuzzle), BOOLEAN.And(LightUpSpesification.CountBulbsInPuzzle1(LightUpSpesification.AnyPuzzle), BOOLEAN.And(LightUpSpesification.CountBulbsInPuzzle2(LightUpSpesification.AnyPuzzle), BOOLEAN.And(LightUpSpesification.CountBulbsInPuzzle3(LightUpSpesification.AnyPuzzle), BOOLEAN.And(LightUpSpesification.CountBulbsInPuzzle4(LightUpSpesification.AnyPuzzle), LightUpSpesification.CountBulbsInPuzzle5(LightUpSpesification.AnyPuzzle))))));
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._W()), LightUpSpesification._L());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._0()), LightUpSpesification._0());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._1()), LightUpSpesification._1());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._2()), LightUpSpesification._2());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._3()), LightUpSpesification._3());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._4()), LightUpSpesification._4());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._B()), LightUpSpesification._B());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._G()), LightUpSpesification._L());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._X()), LightUpSpesification._X());
    ITerm.axiom(LightUpSpesification.Switch(LightUpSpesification._L()), LightUpSpesification._L());
    ITerm.axiom(LightUpSpesification.SwitchLineLeft(LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5))))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5)))))));
    ITerm.axiom(LightUpSpesification.SwitchLineRight(LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.Switch(LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.Switch(LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.Switch(LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.Switch(LightUpSpesification.T5)), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.T4, LightUpSpesification.Switch(LightUpSpesification.T5)))))), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.T5, LightUpSpesification._B()), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T4, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T3, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T2, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._W()), BOOLEAN.Or(BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._L()), BOOLEAN.Equal(LightUpSpesification.T1, LightUpSpesification._G())))), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5), LightUpSpesification.mkLine(LightUpSpesification.Switch(LightUpSpesification.T1), LightUpSpesification.Switch(LightUpSpesification.T2), LightUpSpesification.Switch(LightUpSpesification.T3), LightUpSpesification.Switch(LightUpSpesification.T4), LightUpSpesification.T5))))), LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5)))))));
    ITerm.axiom(LightUpSpesification.PutLights(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), LightUpSpesification.mkLightUp(LightUpSpesification.SwitchLineLeft(LightUpSpesification.SwitchLineRight(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5))), LightUpSpesification.SwitchLineLeft(LightUpSpesification.SwitchLineRight(LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5))), LightUpSpesification.SwitchLineLeft(LightUpSpesification.SwitchLineRight(LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5))), LightUpSpesification.SwitchLineLeft(LightUpSpesification.SwitchLineRight(LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5))), LightUpSpesification.SwitchLineLeft(LightUpSpesification.SwitchLineRight(LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5)))));
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(LightUpSpesification._B(), LightUpSpesification._B(), null, null, null)), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(null, LightUpSpesification._B(), LightUpSpesification._B(), null, null)), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(null, null, LightUpSpesification._B(), LightUpSpesification._B(), null)), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(null, null, null, LightUpSpesification._B(), LightUpSpesification._B())), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(LightUpSpesification._B(), LightUpSpesification._W(), LightUpSpesification._B(), null, null)), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(null, LightUpSpesification._B(), LightUpSpesification._W(), LightUpSpesification._B(), null)), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(null, null, LightUpSpesification._B(), LightUpSpesification._W(), LightUpSpesification._B())), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(LightUpSpesification._B(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._B(), null)), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(null, LightUpSpesification._B(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._B())), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(LightUpSpesification._B(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._B())), BOOLEAN.False());
    ITerm.axiom(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.mkLine(null, null, null, null, null)), BOOLEAN.True());
    ITerm.axiom(LightUpSpesification.CheckAllDoubleLamps(LightUpSpesification.mkLightUp(LightUpSpesification.l1, LightUpSpesification.l2, LightUpSpesification.l3, LightUpSpesification.l4, LightUpSpesification.l5)), BOOLEAN.If_Then_Else(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.l1), BOOLEAN.If_Then_Else(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.l2), BOOLEAN.If_Then_Else(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.l3), BOOLEAN.If_Then_Else(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.l4), BOOLEAN.If_Then_Else(LightUpSpesification.NoDoubleLampCheck(LightUpSpesification.l5), BOOLEAN.True(), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()));
    ITerm.axiom(LightUpSpesification.CheckForGreys(LightUpSpesification.AnyBox), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.AnyBox, LightUpSpesification._G()), INTEGER.natValueTerm(1), INTEGER.natValueTerm(0)));
    ITerm.axiom(LightUpSpesification.CheckForWhites(LightUpSpesification.AnyBox), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.AnyBox, LightUpSpesification._W()), INTEGER.natValueTerm(1), INTEGER.natValueTerm(0)));
    ITerm.axiom(LightUpSpesification.CheckLineForGrey(LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForGreys(LightUpSpesification.T1), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForGreys(LightUpSpesification.T2), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForGreys(LightUpSpesification.T3), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForGreys(LightUpSpesification.T4), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForGreys(LightUpSpesification.T5), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), INTEGER.natValueTerm(0)))))));
    ITerm.axiom(LightUpSpesification.CheckLineForWhite(LightUpSpesification.mkLine(LightUpSpesification.T1, LightUpSpesification.T2, LightUpSpesification.T3, LightUpSpesification.T4, LightUpSpesification.T5)), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForWhites(LightUpSpesification.T1), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForWhites(LightUpSpesification.T2), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForWhites(LightUpSpesification.T3), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForWhites(LightUpSpesification.T4), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckForWhites(LightUpSpesification.T5), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), INTEGER.natValueTerm(0)))))));
    ITerm.axiom(LightUpSpesification.CheckPuzzleForGrey(LightUpSpesification.mkLightUp(LightUpSpesification.l1, LightUpSpesification.l2, LightUpSpesification.l3, LightUpSpesification.l4, LightUpSpesification.l5)), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForGrey(LightUpSpesification.l1), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForGrey(LightUpSpesification.l2), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForGrey(LightUpSpesification.l3), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForGrey(LightUpSpesification.l4), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForGrey(LightUpSpesification.l5), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), INTEGER.natValueTerm(0)))))));
    ITerm.axiom(LightUpSpesification.CheckPuzzleForWhite(LightUpSpesification.mkLightUp(LightUpSpesification.l1, LightUpSpesification.l2, LightUpSpesification.l3, LightUpSpesification.l4, LightUpSpesification.l5)), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForWhite(LightUpSpesification.l1), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForWhite(LightUpSpesification.l2), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForWhite(LightUpSpesification.l3), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForWhite(LightUpSpesification.l4), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification.CheckLineForWhite(LightUpSpesification.l5), INTEGER.natValueTerm(1)), INTEGER.natValueTerm(1), INTEGER.natValueTerm(0)))))));
    ITerm.axiom(LightUpSpesification.GreysAndWhitesMoreThanZero(LightUpSpesification.AnyPuzzle), BOOLEAN.If_Then_Else(BOOLEAN.And(INTEGER.EQ_GR(LightUpSpesification.CheckPuzzleForGrey(LightUpSpesification.AnyPuzzle), INTEGER.natValueTerm(1)), BOOLEAN.Equal(LightUpSpesification.CheckPuzzleForWhite(LightUpSpesification.AnyPuzzle), INTEGER.natValueTerm(0))), BOOLEAN.False(), BOOLEAN.True()));
    ITerm.axiom(LightUpSpesification.Transpose(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B2_1, LightUpSpesification.B3_1, LightUpSpesification.B4_1, LightUpSpesification.B5_1), LightUpSpesification.mkLine(LightUpSpesification.B1_2, LightUpSpesification.B2_2, LightUpSpesification.B3_2, LightUpSpesification.B4_2, LightUpSpesification.B5_2), LightUpSpesification.mkLine(LightUpSpesification.B1_3, LightUpSpesification.B2_3, LightUpSpesification.B3_3, LightUpSpesification.B4_3, LightUpSpesification.B5_3), LightUpSpesification.mkLine(LightUpSpesification.B1_4, LightUpSpesification.B2_4, LightUpSpesification.B3_4, LightUpSpesification.B4_4, LightUpSpesification.B5_4), LightUpSpesification.mkLine(LightUpSpesification.B1_5, LightUpSpesification.B2_5, LightUpSpesification.B3_5, LightUpSpesification.B4_5, LightUpSpesification.B5_5)));
    ITerm.axiom(LightUpSpesification.CorrectPuzzle(LightUpSpesification.AnyPuzzle), BOOLEAN.And(LightUpSpesification.CheckAllDoubleLamps(LightUpSpesification.AnyPuzzle), LightUpSpesification.CheckAllDoubleLamps(LightUpSpesification.Transpose(LightUpSpesification.AnyPuzzle))));
  }

  public static void main(String[] args) {
    System.out.println("Specification:\t" + "LightUpSpesification");

    // Initiate axioms from all specifications
    LightUpSpesification.initAxioms();
    BOOLEAN.initAxioms();
    INTEGER.initAxioms();


    // Execute actions

    final ITerm test1 = ITerm.let("test1", LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._1(), LightUpSpesification._B()), LightUpSpesification.mkLine(LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._X(), LightUpSpesification._1(), LightUpSpesification._W()), LightUpSpesification.mkLine(LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._2(), LightUpSpesification._W()), LightUpSpesification.mkLine(LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._W()), LightUpSpesification.mkLine(LightUpSpesification._W(), LightUpSpesification._W(), LightUpSpesification._1(), LightUpSpesification._B(), LightUpSpesification._W())));
    Reductions.initReduction(Reductions.Traversal.DFS, false, BOOLEAN.And(BOOLEAN.And(LightUpSpesification.CorrectPuzzle((LightUp) test1), LightUpSpesification.CountBulbsInPuzzleAll(LightUpSpesification.PutLights(LightUpSpesification.Transpose(LightUpSpesification.PutLights((LightUp) test1))))), LightUpSpesification.GreysAndWhitesMoreThanZero(LightUpSpesification.PutLights(LightUpSpesification.Transpose(LightUpSpesification.PutLights((LightUp) test1))))));
  }

}
